version: '3'

output: prefixed
silent: true

dotenv: ['.env', '{{.ENV}}/.env', '{{.HOME}}/.env']

vars:
  FILE_PREFIX: '{{.PWD}}/.task.'

tasks:
  bench:
    deps: [bench:r2n]

  bench:r2n:
    cmds:
      - go test ./cmd/r2n -bench=. -benchmem

  test:
    deps: [test:r2n]

  test:r2n:
    vars:
      R2N: bin/r2n-{{OS}}-{{ARCH}}
      CMD: curl -O https://cli.my.to/public/1.txt --limit-rate 1500B
    cmds:
      - defer: rm -f 1.txt
      - task: build
      - '{{.R2N}} -prefix="[curl] " {{.CMD}}'
      - '{{.R2N}} -stdio=stdout -- {{.CMD}}'
      - '{{.R2N}} -stdio=stderr -- {{.CMD}}'
      - '{{.R2N}} -stdio=all -- {{.CMD}}'
      - '{{.R2N}} -- {{.CMD}}'
      - '{{.R2N}} {{.CMD}}'

  release:
    deps: [release:r2n]

  release:r2n:
    sources: ['{{.PWD}}/.env']
    method: timestamp
    cmds:
      - defer: rm -f "{{.FILE_PREFIX}}{{.TASK}}"
      - task: github:release
        vars: {TASK: {ref: .TASK}, REPO: dgdsingen/go, TAG_NAME: '{{.R2N_VERSION}}', NAME: r2n}
      - task: github:release:asset
        vars: {TASK: {ref: .TASK}, REPO: dgdsingen/go, FILE: r2n-.*}

  github:release:
    cmds:
      - >-
        curl -sL -X POST
        "https://api.github.com/repos/{{.REPO}}/releases"
        -H "Authorization: Bearer {{.GH_API_TOKEN}}"
        -H "X-GitHub-Api-Version: {{.GH_API_VERSION}}"
        -H "Accept: application/vnd.github+json"
        -d '{
          "tag_name": "{{.TAG_NAME}}",
          "name": "{{.NAME | default .TAG_NAME}}",
          "target_commitish": "{{.TARGET_COMMITISH | default "main"}}",
          "body": "{{.BODY | default ""}}",
          "draft": {{.DRAFT | default false}},
          "prerelease": {{.PRERELEASE | default false}},
          "generate_release_notes": {{.GENERATE_RELEASE_NOTES | default false}},
          "make_latest": "{{.MAKE_LATEST | default true}}"
        }'
        -o "{{.FILE_PREFIX}}{{.TASK}}"

  github:release:asset:
    vars:
      FILES: {sh: 'fd -t=f -d=1 "{{.FILE}}" "{{.PWD}}/bin/"'}
      RELEASE_ID: {sh: 'jq ".id" "{{.FILE_PREFIX}}{{.TASK}}"'}
    cmds:
      - for: {var: FILES}
        cmd: >-
          {{$name := regexReplaceAll ".*/" .ITEM ""}}
          curl -sL -X POST
          "https://uploads.github.com/repos/{{.REPO}}/releases/{{.RELEASE_ID}}/assets?name={{$name}}"
          -H "Authorization: Bearer {{.GH_API_TOKEN}}"
          -H "X-GitHub-Api-Version: {{.GH_API_VERSION}}"
          -H "Accept: application/vnd.github+json"
          -H "Content-Type: application/octet-stream"
          --data-binary "@{{.ITEM}}"

  build:
    deps: [build:r2n]

  build:r2n:
    sources: ['{{.PWD}}/cmd/r2n/*.go', '{{.PWD}}/.env']
    generates: ['{{.PWD}}/bin/r2n-*']
    method: timestamp
    vars:
      R2N_LATEST_VERSION: {sh: "rg 'R2N_VERSION=(.*)' -r '$1' -o '{{.PWD}}/.env'"}
    cmds:
      - task: go:build:cross
        vars:
          PACKAGE: ./cmd/r2n
          APP_NAME: r2n
          CLI_ARGS: -ldflags "-s -w -extldflags '-static' -X main.version={{.R2N_LATEST_VERSION}}" -tags netgo

  go:build:cross:
    deps:
      - task: go:build
        vars:
          GOOS: '{{.ITEM.GOOS}}'
          GOARCH: '{{.ITEM.GOARCH}}'
          APP_NAME: {ref: .APP_NAME}
          PACKAGE: {ref: .PACKAGE}
          CLI_ARGS: {ref: .CLI_ARGS}
        for:
          matrix:
            GOOS: ['darwin', 'linux']
            GOARCH: ['arm64', 'amd64']

  go:build:
    vars:
      GOOS: '{{.GOOS | default OS}}'
      GOARCH: '{{.GOARCH | default ARCH}}'
      APP_NAME: '{{.APP_NAME | default "app"}}'
      PACKAGE: '{{.PACKAGE | default "."}}'
      OUTPUT: '{{.OUTPUT | default (list "./bin/" .APP_NAME "-" .GOOS "-" .GOARCH | join "")}}'
    cmds:
      - >-
        GOOS="{{.GOOS}}"
        GOARCH="{{.GOARCH}}"
        go build -o {{.OUTPUT}} {{.CLI_ARGS}} {{.PACKAGE}}
